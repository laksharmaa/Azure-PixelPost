import React, { useState, useEffect, useCallback } from 'react';
import { Loader, Card, FormField, SkeletonCard } from '../components';

const POSTS_PER_PAGE = 12; // Number of posts per fetch

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post, index) => (
      <Card key={`${post._id}-${index}`} {...post} />
    ));
  }

  return (
    <h2 className="mt-5 font-bold text-lightText dark:text-darkText text-xl uppercase">
      {title}
    </h2>
  );
};


const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState([]);
  const [searchText, setSearchText] = useState('');
  const [searchedResults, setSearchedResults] = useState(null);
  const [page, setPage] = useState(1); // Track the current page
  const [hasMore, setHasMore] = useState(true); // Track if more posts are available

  const fetchPosts = async (pageNumber = 1) => {
    setLoading(true);

    try {
      const response = await fetch(
        `${import.meta.env.VITE_BASE_URL}/api/v1/post?page=${pageNumber}&limit=${POSTS_PER_PAGE}`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );

      if (response.ok) {
        const result = await response.json();
        if (result.data.length === 0) {
          setHasMore(false); // No more posts to load
        } else {
          setAllPosts((prevPosts) => {
            const newPosts = result.data.filter(
              (newPost) => !prevPosts.some((post) => post._id === newPost._id)
            );
            return [...prevPosts, ...newPosts];
          });
        }
      } else {
        console.error('Error:', response.statusText);
      }
    } catch (error) {
      console.error('Error fetching posts:', error);
      alert('Error fetching posts');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts(page);
  }, [page]);

  const handleSearchChange = (e) => {
    setSearchText(e.target.value);

    const searchResults = allPosts.filter(
      (item) =>
        item.name.toLowerCase().includes(e.target.value.toLowerCase()) ||
        item.prompt.toLowerCase().includes(e.target.value.toLowerCase())
    );

    setSearchedResults(searchResults);
  };

  const handleScroll = useCallback(() => {
    if (
      window.innerHeight + document.documentElement.scrollTop >=
      document.documentElement.offsetHeight - 100 &&
      hasMore &&
      !loading
    ) {
      setPage((prevPage) => prevPage + 1);
    }
  }, [hasMore, loading]);

  useEffect(() => {
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [handleScroll]);

  return (
    <section
      className="mt-3 max-w-7xl mx-auto p-8 
  bg-lightBg dark:bg-darkBg 
  text-lightText dark:text-darkText 
  rounded-lg shadow-md transition-colors duration-300 ease-in-out"
    >
      <div>
        <h1 className="font-extrabold text-lightText dark:text-darkText text-[32px]">
          The Community Showcase
        </h1>
        <p className="mt-2 text-lightText dark:text-darkText text-[16px] max-w-[500px]">
          Browse through the image of imaginative images generated by AI
        </p>
      </div>

      <div className="mt-16">
        <FormField
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="Search..."
          value={searchText}
          handleChange={handleSearchChange}
          className="bg-lightInput dark:bg-darkInput text-lightText dark:text-darkText 
            border border-gray-300 dark:border-gray-700 rounded-lg"
        />
      </div>

      <div className="mt-10">
        {loading && page === 1 ? (
          <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
            {Array.from({ length: POSTS_PER_PAGE }).map((_, index) => (
              <SkeletonCard key={index} />
            ))}
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#6b7280] dark:text-[#d1d5db] text-xl mb-3">
                Showing results for{' '}
                <span className="text-darkText dark:text-lightText">{searchText}</span>
              </h2>
            )}

            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards data={searchedResults} title="No search results found" />
              ) : (
                <RenderCards data={allPosts} title="No Posts found" />
              )}
            </div>
          </>
        )}
        {loading && page > 1 && (
          <div className="flex justify-center items-center mt-5">
            <Loader />
          </div>
        )}
      </div>
    </section>
  );
};

export default Home;
